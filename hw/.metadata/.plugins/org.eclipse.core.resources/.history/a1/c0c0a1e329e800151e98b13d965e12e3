
public class Tree {
	public static enum NodeType {
		OPERATOR, OPERAND
	}

	public static class Node {
		static final char OPERATOR_PLUS = '+';
		static final char OPERATOR_MINUS = '-';
		static final char OPERATOR_MULT = '*';
		static final char OPERATOR_DIV = '/';
		static final char OPERATOR_POW = '^';

		Node left, right, parent;
		String value;
		NodeType type;

		public Node(String value) {
			this(null, null, null, value, Node.getNodeType(value));
		}

		public Node(Node left, Node right, Node parent, String value) {
			this(left, right, parent, value, Node.getNodeType(value));
		}

		public Node(Node parent, String value) {
			this(null, null, parent, value, Node.getNodeType(value));
		}

		public Node(Node left, Node right, Node parent, String value, NodeType type) {
			this.left = left;
			this.right = right;
			this.parent = parent;
			this.value = value;
			this.type = type;
		}

		public void AddRigth(String v){
			this.right = new Node(this, v);
		}

		public static NodeType getNodeType(String value) {
			switch (value.toCharArray()[0]) {
			case OPERATOR_PLUS:
			case OPERATOR_MINUS:
			case OPERATOR_MULT:
			case OPERATOR_DIV:
			case OPERATOR_POW:
				return NodeType.OPERATOR;
			default:
				return NodeType.OPERAND;
			}
		}
	}

	Node root;

	public void Add(String v) {
		if (root == null)
			root = new Node(v);
		switch (Node.getNodeType(v)) {
		case OPERATOR:			
			break;
		default:
			break;
		}

	}

}
