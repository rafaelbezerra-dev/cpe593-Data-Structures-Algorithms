import java.io.IOException;
import java.lang.management.MemoryUsage;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.OptionalDouble;
import java.util.Random;

public class Benchmark {
	
	final static Runtime instance = Runtime.getRuntime();
	final static int mb = 1024 * 1024; 
	final static int[] _sizes = { 1000000, 10000000, 100000000, 250000000, 500000000};//, 750000000, 850000000, 950000000, 1000000000 };
	final static int[] _mult = { 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39 };

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		HashMap<Integer, ArrayList<Long>> map = new HashMap<>(); 
		ArrayList<Integer> sizes = new ArrayList<>();
		for (int i : _sizes){
			sizes.add(i);
			map.put(i, new ArrayList<>());
		}
		for (int k = 0; k < 3; k++) {
//			Collections.shuffle(sizes);

			for (Integer size : sizes) {
				System.out.println("Building a list with size of " + size);
				int[] arr = new int[size];
				for (int i = 0; i < arr.length; i++)
					arr[i] = i+1;
				
				long startTime = System.currentTimeMillis();
				int[] res = BuildList.run(arr, _mult);
				long sum = 0;
				for (int j = 0; j < res.length; j++)
					sum += res[j];
				long elapsedTime = System.currentTimeMillis() - startTime;			
				
				System.out.println(res.length + " " + sum + " " + elapsedTime);

				showMemory();
				
				map.get(size).add(elapsedTime);
				System.gc();
				System.out.println("cleaning");
				long hold = System.currentTimeMillis();
				while (System.currentTimeMillis() - hold < 10000);
				

				showMemory();
			}

		}
		toCSV(map);
		

	}
	
	private static void showMemory(){
		System.out.println("***** Heap utilization statistics [MB] *****");
		 
		// available memory
		System.out.println("\tTotal Memory:\t" + instance.totalMemory() / mb);
 
		// free memory
		System.out.println("\tFree Memory:\t" + instance.freeMemory() / mb);
 
		// used memory
		System.out.println("\tUsed Memory:\t" + (instance.totalMemory() - instance.freeMemory()) / mb);
 
		// Maximum available memory
		System.out.println("\tMax Memory:\t" + instance.maxMemory() / mb);
		System.out.println("********************************************\n");
	}

	private static void toCSV(HashMap<Integer, ArrayList<Long>> map) {
		// TODO Auto-generated method stub
		StringBuilder csv = new StringBuilder("list_size,miliseconds\n");
		
		for (int key : map.keySet()) {
			OptionalDouble average = map.get(key)
		            .stream()
		            .mapToDouble(a -> a)
		            .average();
			csv.append(key)
			.append(",")
			.append(average.getAsDouble())
			.append("\n");
			
		}
		
		try {
			System.out.print("Writing output to file...");
			Files.write(Paths.get("log.csv"), csv.toString().getBytes());
			System.out.println(" done.");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
