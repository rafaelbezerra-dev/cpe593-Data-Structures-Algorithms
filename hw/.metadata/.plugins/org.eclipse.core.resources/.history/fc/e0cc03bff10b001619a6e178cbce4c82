/**
* 
* @author Rafael Bezerra
*
* Based on the code found on:
* 	http://www.comscigate.com/cs/IntroSedgewick/40adt/47st/Boggle.java.html
* from Robert Sedgewick and Kevin Wayne
*/

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Scanner;

public class Boggle {
	
	static class Trie {

		char c;
		Trie[] children;
		boolean isWord;

		public Trie() {
			this((char) 0);
		}

		public Trie(char c) {
			this.c = c;
			this.children = new Trie['z' - 'A' + 1];
			this.isWord = false;
		}

		public void add(String word) {
			if (word.isEmpty()) {
				this.isWord = true;
				return;
			}

			char letter = word.charAt(0);
			int index = letter - 'A';

			if (this.children[index] == null) {
				this.children[index] = new Trie(letter);
			}

			this.children[index].add(word.substring(1));
		}
		
		public boolean contains(String word) {
			if (word.isEmpty())
				if (this.isWord)
					return true;
				else
					return false;

			char letter = word.charAt(0);
			int index = letter - 'A';

			if (this.children[index] == null) {
				return false;
			}

			return this.children[index].contains(word.substring(1));
		}

		public boolean containsPrefix(String word) {
			if (word.isEmpty())
				return true;

			char letter = word.charAt(0);
			int index = letter - 'A';

			if (this.children[index] == null) {
				return false;
			}

			return this.children[index].containsPrefix(word.substring(1));
		}

	}

	static class BoggleBoard {
		char[][] board;
		boolean[][] visited;
		Trie dict;

		public BoggleBoard(int n) {
			board = new char[n][n];
			visited = new boolean[n][n];
		}

		public void setDict(Trie dict) {
			this.dict = dict;
		}

		public void addInline(int pos, char v) {
			int i = pos / board.length;
			int j = pos % board.length;
			board[i][j] = v;
		}

		public boolean canMoveToPos(int i, int j) {
			if (i < 0 || j < 0 || i >= board.length || j >= board.length)
				return false;
			return !visited[i][j];
		}

		public void showWords() {
			for (int i = 0; i < board.length; i++)
				for (int j = 0; j < board.length; j++)
					dfs("", i, j);
		}

		private void dfs(String prefix, int i, int j) {
			if (!canMoveToPos(i, j)) return;

			if (!dict.containsPrefix(prefix))
				return;

			visited[i][j] = true;

			prefix = prefix + board[i][j];
			if (prefix.length() > 2 && dict.contains(prefix))
				System.out.println(prefix);

			for (int ii = i-1; ii <= i+1; ii++)
				for (int jj = j-1; jj <= j+1; jj++)
					dfs(prefix, ii, jj);

			visited[i][j] = false;
		}

		@Override
		public String toString() {
			StringBuilder b = new StringBuilder();
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[i].length; j++) {
					b.append(board[i][j]).append(' ');
				}
				b.append("\n");
			}
			return b.toString();
		}
	}

	public static void main(String[] args) throws FileNotFoundException {

		Trie dict = new Trie();
		BoggleBoard board;
		Scanner in = new Scanner(new FileReader("dictionary2.txt"));
		while (in.hasNextLine()) {
			String line = in.nextLine();
			dict.add(line);
		}
		in.close();

		in = new Scanner(new FileReader("boggle.dat"));
		int n = in.nextInt();
		board = new BoggleBoard(n);
		board.setDict(dict);
		for (int i = 0; i < n * n; i++) {
			char c = in.next().toCharArray()[0];
			board.addInline(i, c);
			// System.out.println(in.next());
		}
		in.close();
		// System.out.println(board.toString());
		board.showWords();

	}

}
